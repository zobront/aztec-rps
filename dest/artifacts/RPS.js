/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EthAddress } from '@aztec/aztec.js';
import { Point } from '@aztec/foundation/fields';
import RPSContractArtifactJson from './RPS.json' assert { type: 'json' };
export const RPSContractArtifact = RPSContractArtifactJson;
/**
 * Type-safe interface for contract RPS;
 */
export class RPSContract extends ContractBase {
    constructor(completeAddress, wallet, portalContract = EthAddress.ZERO) {
        super(completeAddress, RPSContractArtifact, wallet, portalContract);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, RPSContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(pxe) {
        return new DeployMethod(Point.ZERO, pxe, RPSContractArtifact, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(pxe, publicKey) {
        return new DeployMethod(publicKey, pxe, RPSContractArtifact, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return RPSContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUlBTLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FydGlmYWN0cy9SUFMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0Esc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBQWlDLFFBQVEsRUFBRSxZQUFZLEVBQStDLFlBQVksRUFBRSxVQUFVLEVBQXVELE1BQU0saUJBQWlCLENBQUM7QUFDcE4sT0FBTyxFQUFNLEtBQUssRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR3JELE9BQU8sdUJBQXVCLE1BQU0sWUFBWSxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHVCQUEyQyxDQUFDO0FBRS9FOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFdBQVksU0FBUSxZQUFZO0lBRTNDLFlBQ0UsZUFBZ0MsRUFDaEMsTUFBYyxFQUNkLGNBQWMsR0FBRyxVQUFVLENBQUMsSUFBSTtRQUVoQyxLQUFLLENBQUMsZUFBZSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBSUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDcEIsT0FBcUIsRUFDckIsTUFBYztRQUVkLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQXlCLENBQUM7SUFDcEYsQ0FBQztJQUdEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFRO1FBQzNCLE9BQU8sSUFBSSxZQUFZLENBQWMsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsR0FBUSxFQUFFLFNBQW9CO1FBQzlELE9BQU8sSUFBSSxZQUFZLENBQWMsU0FBUyxFQUFFLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFJRDs7T0FFRztJQUNJLE1BQU0sS0FBSyxRQUFRO1FBQ3hCLE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztDQXdCRiJ9