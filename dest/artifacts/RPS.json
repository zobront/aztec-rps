{
    "name": "RPS",
    "functions": [
        {
            "name": "_validateAndAddGame",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "challengee",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "game_id",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "_validateAndUpdateLeaderboard",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "game_id",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "outcome",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "challengerThrow",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "challenge",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "challengee",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::types::address::AztecAddress",
                        "fields": [
                            {
                                "name": "address",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "private"
                },
                {
                    "name": "game_id",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "first_throw",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "challengeeThrow",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "game_id",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "throw_value",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "settle",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "game_id",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "outcome",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "timeout",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "game_id",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "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flWC+VUJ5lclmF+VYH5VgvlVCeZXJZhflWB+VYL5VQnmVyWYX5VgflWC+VUJ5lclmF+VYH5VgvlVCeZXJZhflWB+VYL5VQnmVyWYX5VgflWC+VUJ5lclmF+VYH5VgvlVCeZXJZhflWB+VYL5VQnmVyWYX5VgflWC+VUJ5lclmF+VYH5VgvlVCeZXJZhflWB+VYL5VQnmVyWYX5VgflWC+VUJ5lclmF+VYH5VgvlVCeZXJZhflWB+VYL5VQnmVyWYX5VgflWC+VUJ5lclmF+VYH5VgvlVCeZXJZhflWB+VYL5VQnmVyWYX5VgflWC+VUJ5lclmF+VYH5VgvlVCeZXJZhflWB+VYL5VQnmVyWYX5VgflWC+VUJ5lclmF+VYH5VgvlVDeZXNZhf1WB+VYP5VQ3mVzWYX9VgflWD+VUN5lc1mF/VYH5Vg/lVDeZXNZhf1WB+VYP5VQ3mVzWYX9VgflWD+VUN5lc1mF/VYH5Vg/lVDeZXNZhf1WB+VYP5VQ3mVzWYX9VgflWD+VUN5lc1mF/VYH5Vg/lVDeZXNZhf1WB+VYP5VQ3mVzWYX9VgflWD+VUN5lc1mF/VYH5Vg/lVDeZXNZhf1WB+VYP5VQ3mVzWYX9VgflWD+VUN5lc1mF/VYH5Vg/lVDeZXNZhf1WB+VYP5VQ3mVzWYX9VgflWD+VUN5lc1mF/VYH5Vg/lVDeZXNZhf1WB+VYP5VQ3mVzWYX9VgflWD+VUN5lc1mF/VYH5Vg/lVDeZXNZhf1WB+VYP5VQ3mVzWYX9VgflWD+VUN5lc1mF/VYH5Vg/lVDeZXNZhf1WB+VYP5VQvmVy2YX7VgftWC+VUL5lctmF+1YH7VgvlVC+ZXLZhftWB+1YL5VQvmVy2YX7VgftWC+VUL5lctmF+1YH7VgvlVC+ZXLZhftWB+1YL5VQvmVy2YX7VgftWC+VUL5lctmF+1YH7VgvlVC+ZXLZhftWB+1YL5VQvmVy2YX7VgftWC+VUL5lctmF+1YH7VgvlVC+ZXLZhftWB+1YL5VQvmVy2YX7VgftWC+VUL5lctmF+1YH7VgvlVC+ZXLZhftWB+1YL5VQvmVy2YX7VgftWC+VUL5lctmF+1YH7VgvlVC+ZXLZhftWB+1YL5VQvmVy2YX7VgftWC+VUL5lctmF+1YH7VgvlVC+ZXLZhftWB+1YL5VQvmVy2YX7VgftWC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",
            "",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "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KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/KiK/cpFfucivXORXLvIrF/mVi/zKRX7lIr9ykV+5yK9c5Fcu8isX+ZWL/MpFfuUiv3KRX7nIr1zkVy7yKxf5lYv8ykV+5SK/cpFfucivXORXLvIrF/mVi/zKRX7lIr9ykV+5yK9c5Fcu8isX+ZWL/MpFfuUiv3KRX7nIr1zkVy7yKxf5lYv8ykV+5SK/cpFfucivXORXLvIrF/mVi/zKRX7lIr9ykV+5yK9c5Fcu8isX+ZWL/MpFfuUiv3KRX7nIr1zkVy7yKxf5lYv8ykV+5SK/cpFfucivXORXLvIrF/mVi/zKRX7lIr9ykV+5yK9c5Fcu8isX+ZWL/MpFfuUiv3KRX7nIr1zkVy7yKxf5lYv8ykV+5SK/cpFfucivXORXLvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrKvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKrJvKr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y+3LLLcvs9y+zHL7Msvtyyy3L7Pcvsxy+zLL7cssty+z3L7Mcvsyy+3LLLcvs9y+zHL7Msvtyyy3L7Pcvsxy+zLL7cssty+z3L7Mcvsyy+0zlttnLLfPWG6fsdw+e6Ba2Vhun7HcPmO5fcZy+4zl9hnL7TOW22cst89Ybp+x3D5juX3GcvuM5fYZy+0zlttnLLfPWG6fsdw+Y7l9xnL7jOX2GcvtM5bbZyy3z1hun7HcPmO5fcZy+4zl9hnL7TOW22cst89Ybp+x3D5juX3GcvuM5fYZy+0zlttnLLfPWG6fsdw+Y7l9xnL7jOX2GcvtM5bbZyy3z1hun7HcPmO5fcZy+4zl9hnL7TOW22cst89Ybp+x3D5juX3GcvuM5fYZy+0zlttnLLfPWG6fsdw+Y7l9xnL7jOX2GcvtM5bbZyy3z1hun7HcPmO5fcZy+4zl9hnL7TOW22cst89Ybp+x3D5juX3GcvuM5fYZy+0zlttnLLfPWG6fsdw+Y7l9xnL7jOX2GcvtM5bbV1huX2G5fYXl9hWW21ceqFYuLLevsNy+wnL7CsvtKyy3r7DcvsJy+wrL7Ssst6+w3L7CcvsKy+0rLLevsNy+wnL7CsvtKyy3r7DcvsJy+wrL7Ssst6+w3L7CcvsKy+0rLLevsNy+wnL7CsvtKyy3r7DcvsJy+wrL7Ssst6+w3L7CcvsKy+0rLLevsNy+wnL7CsvtKyy3r7DcvsJy+wrL7Ssst6+w3L7CcvsKy+0rLLevsNy+wnL7CsvtKyy3r7DcvsJy+wrL7Ssst6+w3L7CcvsKy+0rLLevsNy+wnL7CsvtKyy3r7DcvsJy+wrL7Ssst6+w3L7CcvsKy+0rLLevsNy+wnL7CsvtKyy3r7DcvsJy+wrL7Ssst6+w3L7CcvsKy+0rLLevsNy+wnL7CsvtKyy3r7DcvsJy+wrL7Ssst6+w3L7Ccvuc5fY5y+1zltvnLLfPH6hWdpbb5yy3z1lun7PcPme5fc5y+5zl9jnL7XOW2+cst89Zbp+z3D5nuX3Ocvuc5fY5y+1zltvnLLfPWW6fs9w+Z7l9znL7nOX2Ocvtc5bb5yy3z1lun7PcPme5fc5y+5zl9jnL7XOW2+cst89Zbp+z3D5nuX3Ocvuc5fY5y+1zltvnLLfPWW6fs9w+Z7l9znL7nOX2Ocvtc5bb5yy3z1lun7PcPme5fc5y+5zl9jnL7XOW2+cst89Zbp+z3D5nuX3Ocvuc5fY5y+1zltvnLLfPWW6fs9w+Z7l9znL7nOX2Ocvtc5bb5yy3z1lun7PcPme5fc5y+5zl9jnL7XOW2+cst89Zbp+z3D5nuX3Ocvuc5fY5y+1zltvnLLfPWW6fs9w+Z7l9znL7nOX2VZbbV1luX2W5fZXl9tUHqpUry+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Gcvsay+1rLLevsdy+9kC1cmO5fY3l9jWW29dYbl9juX2N5fY1ltvXWG5fY7l9jeX2NZbb11huX2O5fY3l9jWW29dYbl9juX2N5fY1ltvXWG5fY7l9jeX2NZbb11huX2O5fY3l9jWW29dYbl9juX2N5fY1ltvXWG5fY7l9jeX2NZbb11huX2O5fY3l9jWW29dYbl9juX2N5fY1ltvXWG5fY7l9jeX2NZbb11huX2O5fY3l9jWW29dYbl9juX2N5fY1ltvXWG5fY7l9jeX2NZbb11huX2O5fY3l9jWW29dYbl9juX2N5fY1ltvXWG5fY7l9jeX2NZbb11huX2O5fY3l9jWW29dYbl9juX2N5fY1ltvXWG5fY7l9jeX2NZbb11huX2O5fY3l9jWW29dYbl9juX2N5fY1ltvXWG5fY7l9jeX2NZbb11luX2e5fZ3l9nWW29cfqFbuLLevs9y+znL7Osvt6yy3r7Pcvs5y+zrL7esst6+z3L7Ocvs6y+3rLLevs9y+znL7Osvt6yy3r7Pcvs5y+zrL7esst6+z3L7Ocvs6y+3rLLevs9y+znL7Osvt6yy3r7Pcvs5y+zrL7esst6+z3L7Ocvs6y+3rLLevs9y+znL7Osvt6yy3r7Pcvs5y+zrL7esst6+z3L7Ocvs6y+3rLLevs9y+znL7Osvt6yy3r7Pcvs5y+zrL7esst6+z3L7Ocvs6y+3rLLevs9y+znL7Osvt6yy3r7Pcvs5y+zrL7esst6+z3L7Ocvs6y+3rLLevs9y+znL7Osvt6yy3r7Pcvs5y+zrL7esst6+z3L7Ocvs6y+3rLLevs9y+znL7Osvt6yy3r7Pcvs5y+zrL7esst6+z3L6OcvvSA+X2XXFIrXzFIbXyFYfUylccUitfcUitfMUhtfIVh9TKVxxSK19xWK2McvuuOKxWRrl9VxxWK6PcvisOq5VRbt8Vh9XKKLfvisNqZZTbd8VhtTLK7bvisFoZ5fZdcVitjHL7rjisVka5fVccViuj3L4rDquVUW7fFYfVyii374rDamWU23fFYbUyyu274rBaGeX2XXFYrYxy+644rFZGuX1XHFYro9y+Kw6rlVFu3xWH1coot++Kw2pllNt3xWG1Msrtu+KwWhnl9l1xWK2McvuuOKxWRrl9VxxWK6PcvisOq5VRbt8Vh9XKKLfvisNqZZTbd8UZtrLlbK8bLZf+01At5delrebPK//5j78N9PTPOD/+aPnIMhb7DmUZ9vGhLMMyPpRl2MSHsgxr+FCWYQcfyjIs4ENZhu17KMuweg9lAfXuWN07lAXUu2Np71AWUO+Odb1DWUC9Oxb1DmUB9e5Y0fu9Wfxrlo8VtrbpaIWxSKes0Mvzdenz8Wg//xf6zP3j3+jT7Of/UdDyx99t9uXP2mfytxv1WPK3+/dY8rfb+ljyt7v9WPK3nwTHkr/93DiW/P4p4/7TFZ7J00eanPPXNX57ca4fye1ZPy+9VviIc/+gCY1z/1QKjPMcW4fn4tw/l0Lj3D9sQuPcP0FC49w/FkLj3Hd9aJz7Ag+Ng2rl59g6PBeH1cpj6/BcHFYrj63Dc3FYrTy2Ds/FYbXy2Do8F4fVymPr8FwcViuPrcNzcVitPLYOz8VhtfLYOjwXh9XKY+vwXBxWK4+tw3NxWK08tg7PxWG18tg6PBeH1cpj6/BcHFYrj63Dc3FYrTy2Ds/FYbXy2Do8F4fVymPr8FwcViuPrcNzcVitPLYOz8VhtfLYOjwXh9XKY+vwXBxWK4+tw3NxWK08tg7PxWG18tg6PBeH1cpj6/BcHFYrj63Dc3FYrTy2Ds/FYbXy2Do8F4fVymPr8FwcViuPrcNzcVitvCAehsZhtfKCfhgah9XKCxJiaBxWKy+oiKFxWK28ICSGxmG18oKWGBqH1coLcmJoHFYrLyiKoXFYrbwgKobGYbXygq4YGofVygsiZGgcVisvKIuhcVitvCAXhsZhtfKCBhgah9XKLLfvyXL7EsvtSyy3L7HcvsRy+9ID1cqJ5fYlltuXWG5fYrl9ieX2JZbbl1huX2K5fYnl9iWW25dYbl9iuX2J5fYlltuXWG5fYrl9ieX2JZbbl1huXwp2++zzW8nM0tc4g7/7SB/f9ft85B8ZevrMHlvhe7PH9v3e7LEPByl7rZ/ZWxtlj32S7M0e+9jZmj3YdFSyP0v7+LtP76PssQ+0vdljn357s8c+KqXs7Uf2PszOfa7eZ+c+V++zc5+rX7Knh42yT56r7XON3L9m/7ht8ki7u23yNLm5bSZH3t027tCSPp4bVrwObhvX1+1t4+YorXze1vvgtvGhvb1tfF6+3OaPPLht/FK9vW38Krm9bfwqub1t/Cq5u20ia3l6ft5mg32bSFW3t41fJV9vcxvcNn6V3N42fpXc3jZ+ldzeNn6V1B8noP7LCfht8Wz73us0MXPOZBm/ns9kGR+SI1kmQs6ZLOPjfCbLuCPOZBkXz5ks4zY7k2VckWeygHp34t6cyQLq3Yl1cyTLRLk5kwXUuxPZ5kyWrb3rX7N8rLC1TYcrvN2R0nfr10f/uPg2+c+/Wz9N1Jk/QvK3+/dY8rfb+ljyt7v9VPKJ5vNHSD55btRPeNae9vMVtnX1RAc6k2Xy3DiSZfKEOZJl8iw6kmXydDmSZfK8OJJl8gQ4kmXS6SeyTLSfM1lAvTsRfs5kAfXuRPU5kwXUuxPJ50wWUO9O9J7fmWX0X4ITY2ffCnki4QgrHHonmye+zh8h+dv9eyz52219LPnb3X4s+dtPgmPJ758b6fnTFXbOweaJhnQszv3TIzTO/aMmMs5EQzoW5/5hExrn/gkSGuf+sRAa577rQ+PcF3hoHFYrTzSkY3FYrTzRkE7FmWhIx+KwWnmiIR2Lw2rliYZ0LA6rlSey0LE4rFaeKD3H4rBaeSLeHIvDauWJHnMsDquVJxLLsTisVp6oJsfisFp5YqUci8Nq5YlFcywOq5Un1s+xOKxWnlhKx+KwWnliVR2Lw2rliQV2LA6rlSfW2rE4rFaeWHbH4rBaeWIFHovDauWZxXgqDquVZy7jqTisVp4ZjafisFp55jWeisNq5ZndeCoOq5VnjuOpOKxWnpmOp+KwWnnmO56Kw2rlmfV4Kg6rlWeW5Kk4rFaeeZKn4rBaeWY0norDauWZe3gqDquVF5zC0DisVl4wC0PjsFp5wS8MjcNq5QXLMDQOq5UXXMPQOKxWXjAOQ+OwWnnBOwyNw2rlBfswNA6rlRccxNA4qFa2BbsxNA6qlW3BQwyNg2ple6Ba2RY0wNA4qFY2lttnLLfPWG6fsdw+Y7l9xnL7jOX2GcvtM5bbZyy3z1hun7HcPmO5fcZy+4zl9hnL7TOW22cst89Ybp+x3D5juX3GcvuM5fYZy+0zlttnLLfPWG6fsdw+Y7l9xnL7jOX2Gcvts2C3T/jNry/fEZjK56Xt4wv2LFgD3Jk8tut3Jl94LJQvyT9uW6jv0W2Tmv3xZeAt3fwenX++/J/16V//PX2scfuTABvWuP3y/g1r3H7N/oY1br8Qf8Mat19d//4aM1Vt6xq3PyOyYY3bnwfZsMbtz35sWCPgnM+crq1rBJzz+5+R27BGwDm//9m399e4/zm3DWsEnPP7n1/bsEbAOb//ubQNawSc8/ufN9uwRsA5v/85sg1rBJzz+58P27BGwDm//7mvDWsEnPP7H/LasEbAOb//0a0NawSc8/sfstqwRsA5v/9xqA1rBJzzmUqxdY2Acz6THrauEXDOZ3rC1jUCzvlMJNi6RsA5n438b10j4JzPhvO3rhFwzmdj9FvXCDjns4H3rWsEnPPZaPrWNb7/nJfZEPnWNb7/nJfZuPfWNb7/nJfH95/zMpu23rrG95/zMpuL3rrG95/zMptg3rnGbCx56xoB53w2QLx1jYBzPhv13bpGwDmfDeVuXSPgnM/GZ7euEXDOZ4OuW9cIOOezkdStawSc89nw6NY1As75bMxz6xoB53w2kLl1jYBzPhud3LpGwDmfDTluXSPgnM/GEbeuEXDOZ4ODW9cIOOezEb+tawSc89mE3dY1As75bGpt6xoB5zxgHq4EzMOVgHm4EjAPVwLm4UrAPFwJmIcrAfNwJWAergTMw5WAebgSMA9XAubhSsA8XAmYhysB83AlYB6uBMzDlYB5uBIwD1cC5uFKwDxcCZiHKwHzcCVgHq4EzMOVgHm4EjAPVwLm4UrAPFwJmIcrAfNwJWAergTMw5WAebgSMA9XAubhSsA8XAmYhysB83AlYB6uTObhWvbPNWr76RrtUwds9Ys5mAeXftEBrX9eWj6zjPvgTJZxb5zJMu6XM1nGPXQky2Su70yWca+dyTLuvzNZxj15Jsu4T89kAfXuZI7xTBZQ707mIs9k4fSuT+Ysz2Th9K5P5jbPZOH0rj+29q5/zfKxwtY2Ha6wtSOHK7zdfL08P97sPx7t51v2bPXz4p76z5Pnj0ubffmz9pn87Z48lvztVj2VfDID+0dI/nZjH0v+dr8fS/720+BY8smzo5WP5D3Vn6+w7Tk2mUE+k2XyPDqSZfLkOpJl8iw6kmXydDmRZTJLfSbL5AlwJMuk049kmbT0kSyg3p3MhJ/JAurdyYz5mSyg3p3MrB/JMpltP5Nla++O/ht2MgG/c4W3O/LUO9nJVP0fIfnb/Xss+dttfSz5291+LPnbT4Jjye+fG9l+usLOr1L2iS5xLM790yM0zv2jJjTO/XMpNM79wyY0zv0TJDTO/WMhNM5914fGuS/w0DisVp7ILcfisFp5oswci8Nq5YmIcywOq5Unes+xOKxWnkhDx+KwWnmiIh2Lw2rlieB0LA6rlSfa1LE4rFaeyFjH4rBaeaJ4HYvDauWJOHYsDquVJzrasTisVp5IbsfisFp5os4di8Nq5YmQdywOq5Unmt+xOKxWnsiDx+KwWnmiJB6Lw2rlmcB4Kg6rlWca46k4rFaeyYyn4rBaeaY0norDauWZ2HgqDquVZ3rjqTisVp5JjqfioFq5zlTHU3FQrVxnwuOpOKhWrg9UK9eZI3kqDqqV68y+PBUH1cp15kkeijOTH0/FYbXyTFM8FYfVygtCYWgcVisvaIWhcVitvCAXhsZhtfKCYhgah9XKC6JhaBxWKy/ohqFxWK28IB2GxmG18oJ6GBqH1coLAmJoHFYrLwiLoXFYrbygLIbGYbXyglwYGofVygsaYGgcViuz3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7Kcvsqy+2rLLevsty+ynL7Ksvtqyy3r7Lcvspy+yrL7asst6+y3L7KcvtqsNtnn9/tZZa+xvntpV++ySyVz0tb/kweW+A7k8d2/c7kC4+Fr18i/LptRQIc3Xb7NdE9//zrnm5//KjODLyta9x+9fKGNSYtt3WN26/Y37DG7Zfsb1jj9mv2N6xx+4X4G9a4/er699eYmWJb1wg45zOna+saAed8Zl9tXSPgnN//0NuGNQLO+f0Ps21YI+Cc3/+Q2oY1As75/Q+fbVgj4Jzf/1DZhjUCzvn9D4ttWCPgnN//ENiGNb7/nLf7H+7asMb3n/N2/0NbG9b4/nPeHt9/ztv9T2NtWOP7z3m7/3msDWt8/zlv9z859f4a9z8OtWGNgHN+/4NLG9YIOOcz52DrGgHnfGYHbF0j4JzP5vi3rhFwzmcT91vXCDjns9n4rWsEnPPZFPvWNQLO+WzefOsaAed8Nhm+dY2Acz6b4d66RsA5n01bb10j4JzP5qK3rhFwzmcTzFvXCDjns1njrWsEnPPZVPDWNQLO+Wx+d+saAed8Nmm7dY2Acz6bid26RsA5n02vbl0j4JzP5ky3rhFwzmcToVvXCDjns9nNrWsEnPPZlOXWNQLO+WwecusaAed8Nrm4dY2Acz6bMdy6RsA5n00Dbl0j4JzP5va2rhFwzmezcFvXCDjnsxG3rWsEnPOAebgWMA/XAubhWsA8XAuYh2sB83AtYB6uBczDtYB5uBYwD9cC5uFawDxcC5iHawHzcC1gHq4FzMO1gHm4FjAP1wLm4VrAPFwLmIdrAfNwLWAergXMw7WAebgWMA/XAubhWsA8XA+Yh+sB83A9YB6uB8zD9cf3n/P+/fNw2cbP88frpsfP/3ou9nHl9c/+Q9rKPrz8x6/aX/9c/uXyjzjDSjgXZ9ge5+IMi+ZYnPF7j3NxhvV1Ls6w6c7FGZbiuTjD/jwXZ1i15+JEtnJP9fPyXvIoTmQrL8SJbOWFOJGt3Ovn5fZ4tN/GKeN3iufiRPbOQpzI3lmIE9k7C3FCe+c+Tmjv3McJ7Z37OKzeGZsc5+JEvhtciBP5bnAhDquVx9bJuTisVh67LOfisFp5bMici8Nq5bF3cy4Oq5XHNs+5OKxWHjtC5+KwWnlsHp2Lw2rlsc90Lg6rlceW1Lk4rFYeu1fn4rBaeWx0nYvDauWxJ3YuDquVx/bZuTisVh47befisFp5bMqdi8Nq5bF/dy4Oq5XHVt+5OKxWHruC5+KwWnlsIJ6Lw2rlsdd4Lg6rlce25Lk4rFYeO5jn4rBaeWx2novDauWxL3ouDquVxxbquTisVh67refisFp5bMyei8Nq5bGHey4Oq5XHdu+5OKxWHjvD5+KwWnlsIp+Lw2rlsd98Lg6rlcfW9Lk4rFYeu9jn4rBaeWx4n4vDauWxN34uDquVQ+21hTisVg611xbisFo51F5biMNq5VB7bSEOq5VD7bWFOKxWjrXX7uOwWjnWXruPg2plZ9lrPv5KhHNxUK3sLLfPH6hWdpbb5yy3z1lun7PcPme5fc5y+5zl9jnL7XOW2+cst89Zbp+z3D5nuX3Ocvuc5fY5y+1zltvnLLfPWW6fs9w+Z7l9znL7nOX2Ocvtc5bb5yy3z1lun7PcPme5fc5y+5zl9jnL7XOW2+cst89Zbp+z3D5nuX3Ocvuc5fY5y+3zSF3Mno/PLxC2ZxrGCTzoC3EihShLPX/GSd1GcQJfypZb+YxjPvy3E/hSXokT+AZjJU7gG4yVOIFvMFbiRPbOQpzI3vmXOPU5iBMpRK3ECXyDsRInspUX4hxr5XGcY608jnOslcdxjrXyOM6xVh7HYdVgpIG0EieyBsvzx7vB8hy9G4w0kFbiRNbgQpzIGlyIE1mDC3Eia3AhTmQNLsSJfHO6ECeyle/jRBpIK3FYrRxpIK3EYbVypIG0EofVypEG0kocVitHGkgrcVitHGkgrcRhtXKkgbQSh9XKkQbSShxWK0c6Nvb09hnnOfwQINKxuY9TIx2blTiRvfOvcQZcuUY6NitxInsnpS+fZ5XhZkX2zkKcyPc7C3Eieyf1H6+dPKrBGmmRLMSJtEhW4kT2zkKc2A+ub+OE9s59nNDeuY8T+X5nIU7kf4UuxAlt5fs4rFaOtEgW4kRaJCtxWK0caZGsxGG1cqRFcj9sVSMtkpU4sa18Gye2lW/jxLbybZzYVr6LE2mRrMSJbeXbOKghzxppkazEYbVypEWyEofVypEWyUocVitHWiQLcSItkpU4rFaOtEhW4rBaOdIiWYnDauXIX4haicOqwVDH5j7O2LFJz4//XEylfN7lP+4ansfbu4bH5vau4av79q7hi/DurvHk/+1dw+6+vet3/Zsfj7vf3vW7/s2Pf6Chfnpb19Ea3TV8gd/dNR42vr1r+G9+ftc//vH/AAedDsM="
        ],
        "fileMap": {
            "1": {
                "source": "mod game;\nmod thrownote;\n\ncontract RPS {\n    use dep::std::option::Option;\n    use dep::aztec::{\n        note::{\n            note_header::NoteHeader\n        },\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            map::Map,\n            public_state::PublicState,\n            immutable_singleton::ImmutableSingleton\n        },\n        types::{\n            type_serialization::field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n            address::{AztecAddress}\n        },\n        selector::compute_selector\n    };\n    use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n\n    use crate::{\n        game::{Game, GameMethods, GAME_SERIALIZED_LEN},\n        thrownote::{ThrowNote, ThrowNoteMethods, THROW_NOTE_LEN},\n    };\n\n    struct Storage {\n        // game_id => game data\n        games: Map<PublicState<Game, GAME_SERIALIZED_LEN>>,\n        // game_id => private (challenger) throw\n        privateThrows: Map<ImmutableSingleton<ThrowNote, THROW_NOTE_LEN>>,\n        // address => games won\n        wins: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        // address => games lost\n        losses: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                games: Map::new(context, 1, |context, slot| {\n                    PublicState::new(context, slot, GameMethods)\n                }),\n                privateThrows: Map::new(context, 2, |context, slot| {\n                    ImmutableSingleton::new(context, slot, ThrowNoteMethods)\n                }),\n                wins: Map::new(context, 3, |context, slot| {\n                    PublicState::new(context, slot, FieldSerializationMethods)\n                }),\n                losses: Map::new(context, 4, |context, slot| {\n                    PublicState::new(context, slot, FieldSerializationMethods)\n                })\n            }\n        }\n    }\n\n    ////////////////////////////////\n    ////// EXTERNAL FUNCTIONS //////\n    ////////////////////////////////\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(private)]\n    fn challenge(challengee: AztecAddress, game_id: Field, first_throw: Field) {\n        // 1 = rock, 2 = paper, 3 = scissors\n        assert(first_throw as u32 > 0);\n        assert(first_throw as u32 < 4);\n\n        // msg.sender == 0 would screw up the validation check below, so check explicitly\n        assert(context.msg_sender() != 0);\n\n        let mut note = ThrowNote::new(first_throw, context.msg_sender());\n        storage.privateThrows.at(game_id).initialize(&mut note, Option::some(context.msg_sender()));\n\n        let selector = compute_selector(\"_validateAndAddGame(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [challengee.address, game_id]);\n    }\n\n    #[aztec(public)]\n    fn challengeeThrow(game_id: Field, throw_value: Field) {\n        // 1 = rock, 2 = paper, 3 = scissors\n        assert(throw_value as u32 > 0);\n        assert(throw_value as u32 < 4);\n\n        let mut game = storage.games.at(game_id).read();\n\n        // if a challengee has been set, only they can throw in response\n        // if no challengee is set, anyone can throw and set themselves as challengee\n        if (game.challengee.address != 0) {\n            assert(game.challengee.address == context.msg_sender());\n        } else {\n            game.challengee.address = context.msg_sender();\n        }\n\n        // make sure the throw hasn't happened yet\n        assert(game.challengeeThrow == 0);\n\n        // the throw can live in public state because challenger throw has already been made\n        game.challengeeThrow = throw_value;\n        game.challengeeThrowTime = context.timestamp();\n        storage.games.at(game_id).write(game);\n    }\n\n    #[aztec(private)]\n    fn settle(game_id: Field, outcome: Field) {\n        assert(outcome as u32 < 3); // 0 = tie, 1 = win, 2 = lose\n        let challengerThrow = storage.privateThrows.at(game_id).get_note().choice;\n        let selector = compute_selector(\"_validateAndUpdateLeaderboard(Field,Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [game_id, outcome, challengerThrow]);\n    }\n\n    #[aztec(public)]\n    fn timeout(game_id: Field) {\n        let game = storage.games.at(game_id).read();\n        assert(!game.settled);\n\n        // if 1 day has passed since the challengee threw and challenger hasn't settled, challengee wins\n        let timeout = game.challengeeThrowTime + (60 * 60 * 24);\n        assert(timeout as u32 > 0);\n        assert(context.timestamp() as u32 > timeout as u32);\n\n        // update the leaderboard based on the win\n        storage.wins.at(game.challengee.address).write(storage.wins.at(game.challengee.address).read() + 1);\n        storage.losses.at(game.challenger.address).write(storage.losses.at(game.challenger.address).read() + 1);\n    }\n\n    ////////////////////////////////\n    ////// INTERNAL FUNCTIONS //////\n    ////////////////////////////////\n\n    #[aztec(public)]\n    internal fn _validateAndAddGame(challengee: AztecAddress, game_id: Field) {\n        // confirm that this game id hasn't been used before\n        assert(storage.games.at(game_id).read().challenger.address as Field == 0);\n\n        // create the game and put it in public state\n        let game = Game::new(AztecAddress::new(context.msg_sender()), challengee);\n        storage.games.at(game_id).write(game);\n    }\n\n    #[aztec(public)]\n    internal fn _validateAndUpdateLeaderboard(game_id: Field, outcome: Field, challengerThrow: Field) {\n        let mut game = storage.games.at(game_id).read();\n\n        // ensure the game hasn't already been settled\n        assert(!game.settled);\n\n        let challengee = game.challengee.address;\n        let challenger = game.challenger.address;\n\n        // validate the submitted outcome was true based on the throws\n        // update the public wins and losses for the two players\n        if (outcome == 1) {\n            if (challengerThrow == 1) {\n                assert(game.challengeeThrow == 3);\n            } else {\n                assert(challengerThrow == game.challengeeThrow + 1);\n            }\n            storage.wins.at(challenger).write(storage.wins.at(challenger).read() + 1);\n            storage.losses.at(challengee).write(storage.losses.at(challengee).read() + 1);\n        } else if (outcome == 2) {\n            if (challengerThrow == 3) {\n                assert(game.challengeeThrow == 1);\n            } else {\n                assert(challengerThrow == game.challengeeThrow - 1);\n            }\n            storage.wins.at(challengee).write(storage.wins.at(challengee).read() + 1);\n            storage.losses.at(challenger).write(storage.losses.at(challenger).read() + 1);\n        } else {\n            assert(challengerThrow == game.challengeeThrow);\n        }\n\n        // settle the game so this can't be called again\n        game.settled = true;\n        storage.games.at(game_id).write(game);\n    }\n}\n",
                "path": "/home/josh/Documents/test/aztec-rps/src/contracts/rps/src/main"
            },
            "5": {
                "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
                "path": "std/hash"
            },
            "17": {
                "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
                "path": "std/grumpkin_scalar"
            },
            "18": {
                "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
                "path": "std/grumpkin_scalar_mul"
            },
            "33": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option"
            },
            "36": {
                "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/abi"
            },
            "37": {
                "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/address"
            },
            "39": {
                "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/context"
            },
            "46": {
                "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/note/lifecycle"
            },
            "47": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/note/note_getter"
            },
            "49": {
                "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/note/note_hash"
            },
            "53": {
                "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/note/utils"
            },
            "55": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/arguments"
            },
            "60": {
                "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
            },
            "61": {
                "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
            },
            "62": {
                "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/rand"
            },
            "63": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
            },
            "65": {
                "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/notes"
            },
            "66": {
                "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/storage"
            },
            "69": {
                "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
            },
            "72": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note, owner: Option<Field>) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton"
            },
            "73": {
                "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/state_vars/map"
            },
            "74": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
            },
            "76": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse dep::std::hash::pedersen_with_separator;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_with_separator(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )[0]\n    } else {\n        pedersen_with_separator(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )[0]\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note, owner: Option<Field>) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface);\n\n        note\n    }\n    // docs:end:get_note\n\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/state_vars/singleton"
            },
            "83": {
                "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/types/type_serialization/field_serialization"
            },
            "86": {
                "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
                "path": "/home/josh/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/utils"
            },
            "92": {
                "source": "use dep::aztec::types::{\n    address::{AztecAddress},\n    type_serialization::{\n        TypeSerializationInterface,\n        bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN}\n    }\n};\n\nglobal GAME_SERIALIZED_LEN: Field = 5;\n\nstruct Game {\n    challenger: AztecAddress,\n    challengee: AztecAddress,\n    challengeeThrow: Field,\n    challengeeThrowTime: Field,\n    settled: bool\n}\n\nimpl Game {\n    pub fn new(challenger: AztecAddress, challengee: AztecAddress) -> Self {\n        Game {\n            challenger,\n            challengee,\n            challengeeThrow: 0,\n            challengeeThrowTime: 0,\n            settled: false\n        }\n    }\n\n    pub fn serialize(self) -> [Field; GAME_SERIALIZED_LEN] {\n        [self.challenger.address as Field,\n        self.challengee.address as Field,\n        self.challengeeThrow,\n        self.challengeeThrowTime,\n        self.settled as Field]\n    }\n}\n\nfn deserialize(preimage: [Field; GAME_SERIALIZED_LEN]) -> Game {\n    Game {\n        challenger: AztecAddress::new(preimage[0]),\n        challengee: AztecAddress::new(preimage[1]),\n        challengeeThrow: preimage[2],\n        challengeeThrowTime: preimage[3],\n        settled: preimage[4] != 0\n    }\n}\n\nfn serialize(game: Game) -> [Field; GAME_SERIALIZED_LEN] {\n    game.serialize()\n}\n\nglobal GameMethods = TypeSerializationInterface {\n    deserialize,\n    serialize\n};\n",
                "path": "/home/josh/Documents/test/aztec-rps/src/contracts/rps/src/game"
            },
            "93": {
                "source": "use dep::std::hash::pedersen;\nuse dep::aztec::{\n    context::{PrivateContext, PublicContext, Context},\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify\n    },\n    types::address::AztecAddress,\n    hash::compute_secret_hash,\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key\n    }\n};\n\nglobal THROW_NOTE_LEN: Field = 3;\n\nstruct ThrowNote {\n    choice: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl ThrowNote {\n\n    pub fn new(choice: Field, owner: Field) -> Self {\n        let randomness = rand();\n        ThrowNote {\n            choice,\n            owner,\n            randomness,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // STANDARD NOTE_INTERFACE FUNCTIONS\n\n    pub fn serialize(self) -> [Field; THROW_NOTE_LEN] {\n        [self.choice, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(preimage: [Field; THROW_NOTE_LEN]) -> Self {\n        ThrowNote {\n            choice: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen([\n            self.choice,\n            self.owner,\n            self.randomness,\n        ])[0]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ThrowNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; THROW_NOTE_LEN]) -> ThrowNote {\n    ThrowNote::deserialize(preimage)\n}\n\nfn serialize(note: ThrowNote) -> [Field; THROW_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ThrowNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ThrowNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ThrowNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ThrowNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal ThrowNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
                "path": "/home/josh/Documents/test/aztec-rps/src/contracts/rps/src/thrownote"
            }
        }
    }
}
